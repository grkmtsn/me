/* src\App.svelte generated by Svelte v3.31.0 */
import {
	SvelteComponent,
	append,
	attr,
	check_outros,
	create_component,
	destroy_component,
	detach,
	element,
	group_outros,
	init,
	insert,
	mount_component,
	safe_not_equal,
	set_style,
	space,
	transition_in,
	transition_out
} from "../web_modules/svelte/internal.js";

import { fly, fade } from "../web_modules/svelte/transition.js";
import { quintOut } from "../web_modules/svelte/easing.js";
import TailwindStyles from "./TailwindStyles.js";
import Logo from "./components/Logo/index.js";
import Nav from "./components/Navigation/index.js";
import Dot from "./components/Dot/index.js";
import About from "./components/About/index.js";
import Experience from "./components/Experience/index.js";
import Skills from "./components/Skills/index.js";
import Contact from "./components/Contact/index.js";
import { activePage } from "./store.js";

function create_if_block_3(ctx) {
	let about;
	let current;
	about = new About({});

	return {
		c() {
			create_component(about.$$.fragment);
		},
		m(target, anchor) {
			mount_component(about, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(about.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(about.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(about, detaching);
		}
	};
}

// (38:8) {#if activePage_value === 2}
function create_if_block_2(ctx) {
	let experience;
	let current;
	experience = new Experience({});

	return {
		c() {
			create_component(experience.$$.fragment);
		},
		m(target, anchor) {
			mount_component(experience, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(experience.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(experience.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(experience, detaching);
		}
	};
}

// (41:8) {#if activePage_value === 3}
function create_if_block_1(ctx) {
	let skills;
	let current;
	skills = new Skills({});

	return {
		c() {
			create_component(skills.$$.fragment);
		},
		m(target, anchor) {
			mount_component(skills, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(skills.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(skills.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(skills, detaching);
		}
	};
}

// (44:8) {#if activePage_value === 4}
function create_if_block(ctx) {
	let contact;
	let current;
	contact = new Contact({});

	return {
		c() {
			create_component(contact.$$.fragment);
		},
		m(target, anchor) {
			mount_component(contact, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(contact.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(contact.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(contact, detaching);
		}
	};
}

function create_fragment(ctx) {
	let div4;
	let div3;
	let div2;
	let div0;
	let logo;
	let t0;
	let nav;
	let t1;
	let div1;
	let dot;
	let t2;
	let t3;
	let t4;
	let t5;
	let current;
	logo = new Logo({});

	nav = new Nav({
			props: { activePage: /*activePage_value*/ ctx[0] }
		});

	dot = new Dot({
			props: { activePage: /*activePage_value*/ ctx[0] }
		});

	let if_block0 = /*activePage_value*/ ctx[0] === 1 && create_if_block_3(ctx);
	let if_block1 = /*activePage_value*/ ctx[0] === 2 && create_if_block_2(ctx);
	let if_block2 = /*activePage_value*/ ctx[0] === 3 && create_if_block_1(ctx);
	let if_block3 = /*activePage_value*/ ctx[0] === 4 && create_if_block(ctx);

	return {
		c() {
			div4 = element("div");
			div3 = element("div");
			div2 = element("div");
			div0 = element("div");
			create_component(logo.$$.fragment);
			t0 = space();
			create_component(nav.$$.fragment);
			t1 = space();
			div1 = element("div");
			create_component(dot.$$.fragment);
			t2 = space();
			if (if_block0) if_block0.c();
			t3 = space();
			if (if_block1) if_block1.c();
			t4 = space();
			if (if_block2) if_block2.c();
			t5 = space();
			if (if_block3) if_block3.c();
			attr(div0, "class", "flex justify-between items-center mb-12");
			attr(div1, "class", "h-96 relative");
			attr(div2, "class", "relative px-4 py-10 bg-white shadow-lg sm:rounded-3xl sm:p-16");
			attr(div3, "class", "relative py-3 sm:mx-auto");
			set_style(div3, "width", "1000px");
			attr(div4, "class", "min-h-screen bg-gray-100 py-6 flex flex-col justify-center sm:py-12");
		},
		m(target, anchor) {
			insert(target, div4, anchor);
			append(div4, div3);
			append(div3, div2);
			append(div2, div0);
			mount_component(logo, div0, null);
			append(div0, t0);
			mount_component(nav, div0, null);
			append(div2, t1);
			append(div2, div1);
			mount_component(dot, div1, null);
			append(div1, t2);
			if (if_block0) if_block0.m(div1, null);
			append(div1, t3);
			if (if_block1) if_block1.m(div1, null);
			append(div1, t4);
			if (if_block2) if_block2.m(div1, null);
			append(div1, t5);
			if (if_block3) if_block3.m(div1, null);
			current = true;
		},
		p(ctx, [dirty]) {
			const nav_changes = {};
			if (dirty & /*activePage_value*/ 1) nav_changes.activePage = /*activePage_value*/ ctx[0];
			nav.$set(nav_changes);
			const dot_changes = {};
			if (dirty & /*activePage_value*/ 1) dot_changes.activePage = /*activePage_value*/ ctx[0];
			dot.$set(dot_changes);

			if (/*activePage_value*/ ctx[0] === 1) {
				if (if_block0) {
					if (dirty & /*activePage_value*/ 1) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_3(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(div1, t3);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*activePage_value*/ ctx[0] === 2) {
				if (if_block1) {
					if (dirty & /*activePage_value*/ 1) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_2(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div1, t4);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (/*activePage_value*/ ctx[0] === 3) {
				if (if_block2) {
					if (dirty & /*activePage_value*/ 1) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block_1(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(div1, t5);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}

			if (/*activePage_value*/ ctx[0] === 4) {
				if (if_block3) {
					if (dirty & /*activePage_value*/ 1) {
						transition_in(if_block3, 1);
					}
				} else {
					if_block3 = create_if_block(ctx);
					if_block3.c();
					transition_in(if_block3, 1);
					if_block3.m(div1, null);
				}
			} else if (if_block3) {
				group_outros();

				transition_out(if_block3, 1, 1, () => {
					if_block3 = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(logo.$$.fragment, local);
			transition_in(nav.$$.fragment, local);
			transition_in(dot.$$.fragment, local);
			transition_in(if_block0);
			transition_in(if_block1);
			transition_in(if_block2);
			transition_in(if_block3);
			current = true;
		},
		o(local) {
			transition_out(logo.$$.fragment, local);
			transition_out(nav.$$.fragment, local);
			transition_out(dot.$$.fragment, local);
			transition_out(if_block0);
			transition_out(if_block1);
			transition_out(if_block2);
			transition_out(if_block3);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div4);
			destroy_component(logo);
			destroy_component(nav);
			destroy_component(dot);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (if_block2) if_block2.d();
			if (if_block3) if_block3.d();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let activePage_value;

	const unsubscribe = activePage.subscribe(value => {
		setTimeout(
			() => {
				$$invalidate(0, activePage_value = value);
			},
			500
		);
	});

	return [activePage_value];
}

class App extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default App;