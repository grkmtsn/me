import './index.css.proxy.js';
/* src\components\Experience\index.svelte generated by Svelte v3.31.0 */
import {
	SvelteComponent,
	add_render_callback,
	append,
	assign,
	attr,
	check_outros,
	create_bidirectional_transition,
	create_component,
	destroy_component,
	destroy_each,
	detach,
	element,
	get_spread_object,
	get_spread_update,
	group_outros,
	init,
	insert,
	mount_component,
	safe_not_equal,
	space,
	text,
	transition_in,
	transition_out
} from "../../../web_modules/svelte/internal.js";

import { fly } from "../../../web_modules/svelte/transition.js";
import { quintOut } from "../../../web_modules/svelte/easing.js";
import NextButton from "../NextButton/index.js";
import { works } from "../../constants/index.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[1] = list[i];
	child_ctx[3] = i;
	return child_ctx;
}

// (77:2) {#each works as item, index}
function create_each_block(ctx) {
	let div2;
	let div0;
	let t0_value = /*item*/ ctx[1].date + "";
	let t0;
	let t1;
	let div1;
	let h3;
	let t2_value = /*item*/ ctx[1].title + "";
	let t2;
	let t3;
	let h6;
	let t4_value = /*item*/ ctx[1].brand + "";
	let t4;
	let t5;
	let div2_transition;
	let current;

	return {
		c() {
			div2 = element("div");
			div0 = element("div");
			t0 = text(t0_value);
			t1 = space();
			div1 = element("div");
			h3 = element("h3");
			t2 = text(t2_value);
			t3 = space();
			h6 = element("h6");
			t4 = text(t4_value);
			t5 = space();
			attr(div0, "class", "date svelte-6y2jew");
			attr(h3, "class", "text-lg font-semibold");
			attr(h6, "class", " text-sm font-semibold");
			attr(div1, "class", "body svelte-6y2jew");
			attr(div2, "class", "timeline-item svelte-6y2jew");
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			append(div2, div0);
			append(div0, t0);
			append(div2, t1);
			append(div2, div1);
			append(div1, h3);
			append(h3, t2);
			append(div1, t3);
			append(div1, h6);
			append(h6, t4);
			append(div2, t5);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
		},
		i(local) {
			if (current) return;

			add_render_callback(() => {
				if (!div2_transition) div2_transition = create_bidirectional_transition(
					div2,
					fly,
					{
						delay: 150 * /*index*/ ctx[3],
						duration: 1000,
						x: 0,
						y: 15,
						opacity: 0,
						easing: quintOut
					},
					true
				);

				div2_transition.run(1);
			});

			current = true;
		},
		o(local) {
			if (!div2_transition) div2_transition = create_bidirectional_transition(
				div2,
				fly,
				{
					delay: 150 * /*index*/ ctx[3],
					duration: 1000,
					x: 0,
					y: 15,
					opacity: 0,
					easing: quintOut
				},
				false
			);

			div2_transition.run(0);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div2);
			if (detaching && div2_transition) div2_transition.end();
		}
	};
}

function create_fragment(ctx) {
	let div0;
	let div0_transition;
	let t1;
	let div1;
	let div1_transition;
	let t2;
	let nextbutton;
	let current;
	let each_value = works;
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const nextbutton_spread_levels = [/*buttonProps*/ ctx[0]];
	let nextbutton_props = {};

	for (let i = 0; i < nextbutton_spread_levels.length; i += 1) {
		nextbutton_props = assign(nextbutton_props, nextbutton_spread_levels[i]);
	}

	nextbutton = new NextButton({ props: nextbutton_props });

	return {
		c() {
			div0 = element("div");
			div0.textContent = "EXPERIENCE";
			t1 = space();
			div1 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t2 = space();
			create_component(nextbutton.$$.fragment);
			attr(div0, "class", "absolute left-52 text-lg font-semibold");
			attr(div1, "class", "timeline absolute svelte-6y2jew");
		},
		m(target, anchor) {
			insert(target, div0, anchor);
			insert(target, t1, anchor);
			insert(target, div1, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div1, null);
			}

			insert(target, t2, anchor);
			mount_component(nextbutton, target, anchor);
			current = true;
		},
		p(new_ctx, [dirty]) {
			ctx = new_ctx;

			if (dirty & /*quintOut, works*/ 0) {
				each_value = works;
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div1, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}

			const nextbutton_changes = (dirty & /*buttonProps*/ 1)
			? get_spread_update(nextbutton_spread_levels, [get_spread_object(/*buttonProps*/ ctx[0])])
			: {};

			nextbutton.$set(nextbutton_changes);
		},
		i(local) {
			if (current) return;

			add_render_callback(() => {
				if (!div0_transition) div0_transition = create_bidirectional_transition(
					div0,
					fly,
					{
						duration: 1000,
						x: -15,
						y: 0,
						opacity: 0,
						easing: quintOut
					},
					true
				);

				div0_transition.run(1);
			});

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			add_render_callback(() => {
				if (!div1_transition) div1_transition = create_bidirectional_transition(
					div1,
					fly,
					{
						duration: 1000,
						x: 0,
						y: 15,
						opacity: 0,
						easing: quintOut
					},
					true
				);

				div1_transition.run(1);
			});

			transition_in(nextbutton.$$.fragment, local);
			current = true;
		},
		o(local) {
			if (!div0_transition) div0_transition = create_bidirectional_transition(
				div0,
				fly,
				{
					duration: 1000,
					x: -15,
					y: 0,
					opacity: 0,
					easing: quintOut
				},
				false
			);

			div0_transition.run(0);
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			if (!div1_transition) div1_transition = create_bidirectional_transition(
				div1,
				fly,
				{
					duration: 1000,
					x: 0,
					y: 15,
					opacity: 0,
					easing: quintOut
				},
				false
			);

			div1_transition.run(0);
			transition_out(nextbutton.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div0);
			if (detaching && div0_transition) div0_transition.end();
			if (detaching) detach(t1);
			if (detaching) detach(div1);
			destroy_each(each_blocks, detaching);
			if (detaching && div1_transition) div1_transition.end();
			if (detaching) detach(t2);
			destroy_component(nextbutton, detaching);
		}
	};
}

function instance($$self) {
	const buttonProps = {
		nextPageIndex: 3,
		nextPageNumber: "03",
		nextPageText: "SKILLS"
	};

	return [buttonProps];
}

class Experience extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Experience;